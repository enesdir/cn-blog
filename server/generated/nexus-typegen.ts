/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from ".prisma/client"
import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  RoleEnum: "ADMIN" | "SUPER_USER" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  URL: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    error?: string | null; // String
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  BatchPayload: prisma.BatchPayload;
  Category: prisma.Category;
  Comment: prisma.Comment;
  Mutation: {};
  Post: prisma.Post;
  Query: {};
  Tag: prisma.Tag;
  User: prisma.User;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    error: string | null; // String
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  BatchPayload: { // field return type
    count: number | null; // Int
  }
  Category: { // field return type
    id: number | null; // Int
    name: string | null; // String
    postCount: number | null; // Int
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    slug: string | null; // String
  }
  Comment: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number | null; // Int
    contain: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number | null; // Int
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: { // field return type
    changePassword: NexusGenRootTypes['User'] | null; // User
    userLogin: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    userSignup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number | null; // Int
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    commentCount: number | null; // Int
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number | null; // Int
    likeCount: number | null; // Int
    published: boolean | null; // Boolean
    tags: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    viewCount: number | null; // Int
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    findOneCategory: NexusGenRootTypes['Category'] | null; // Category
    findOneComment: NexusGenRootTypes['Comment'] | null; // Comment
    findOnePost: NexusGenRootTypes['Post'] | null; // Post
    findOneTag: NexusGenRootTypes['Tag'] | null; // Tag
    findOneUser: NexusGenRootTypes['User'] | null; // User
    me: NexusGenRootTypes['User'] | null; // User
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    tags: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Tag: { // field return type
    id: number | null; // Int
    name: string | null; // String
    postCount: number | null; // Int
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    slug: string | null; // String
  }
  User: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    fullName: string | null; // String
    id: number | null; // Int
    isDeleted: boolean | null; // Boolean
    name: string | null; // String
    password: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    role: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    surname: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    error: 'String'
    token: 'String'
    user: 'User'
  }
  BatchPayload: { // field return type name
    count: 'Int'
  }
  Category: { // field return type name
    id: 'Int'
    name: 'String'
    postCount: 'Int'
    posts: 'Post'
    slug: 'String'
  }
  Comment: { // field return type name
    author: 'User'
    authorId: 'Int'
    contain: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    post: 'Post'
    postId: 'Int'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    changePassword: 'User'
    userLogin: 'AuthPayload'
    userSignup: 'AuthPayload'
  }
  Post: { // field return type name
    author: 'User'
    authorId: 'Int'
    categories: 'Category'
    commentCount: 'Int'
    comments: 'Comment'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    likeCount: 'Int'
    published: 'Boolean'
    tags: 'Tag'
    title: 'String'
    updatedAt: 'DateTime'
    viewCount: 'Int'
  }
  Query: { // field return type name
    categories: 'Category'
    findOneCategory: 'Category'
    findOneComment: 'Comment'
    findOnePost: 'Post'
    findOneTag: 'Tag'
    findOneUser: 'User'
    me: 'User'
    posts: 'Post'
    tags: 'Tag'
    users: 'User'
  }
  Tag: { // field return type name
    id: 'Int'
    name: 'String'
    postCount: 'Int'
    posts: 'Post'
    slug: 'String'
  }
  User: { // field return type name
    comments: 'Comment'
    createdAt: 'DateTime'
    email: 'String'
    fullName: 'String'
    id: 'Int'
    isDeleted: 'Boolean'
    name: 'String'
    password: 'String'
    posts: 'Post'
    role: 'RoleEnum'
    surname: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    changePassword: { // args
      newPassword: string; // String!
      oldPassword: string; // String!
    }
    userLogin: { // args
      email: string; // String!
      password: string; // String!
    }
    userSignup: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
      surname?: string | null; // String
    }
  }
  Query: {
    categories: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    findOneCategory: { // args
      categoryId: number; // Int!
    }
    findOneComment: { // args
      commentId: number; // Int!
    }
    findOnePost: { // args
      postId: number; // Int!
    }
    findOneTag: { // args
      tagId: number; // Int!
    }
    findOneUser: { // args
      userId: number; // Int!
    }
    posts: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    tags: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    users: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}